server.port=8000
#使用第一条时，时间是 utc
#由于mysql中默认设置的CST时间… 你用UTC的话，CST = UTC+8就会出现这个问题  https://blog.csdn.net/nakiri_arisu/article/details/80991972
# 2019年8月13日10:50:03   使用第二条连接进行连接后  线上测试之后会出现数据库时间错误  故线上部署时使用第一条链接   https://blog.csdn.net/wo18237095579/article/details/90288735
spring.datasource.url=jdbc:mysql://localhost:3306/spring?serverTimezone=Hongkong&characterEncoding=utf-8
#spring.datasource.url=jdbc:mysql://localhost:3306/spring?characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.encoding=utf-8
spring.thymeleaf.cache=false
spring.mvc.static-path-pattern=/**
spring.resources.static-locations=classpath:/static/
spring.thymeleaf.mode=HTML

#
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=100MB

#控制台输出sql语句
logging.level.com.example.demo3.mapper=debug

#指定mapper包的位置
mybatis.mapper-locations= classpath:mybatis/mapper/*.xml

#com.mycompany.mavenspringboot.controller 日志 WARN级别输出
#logging.level.com.xxx.xxxx.controller=WARN
#com.mycompany.mavenspringboot.mapper sql日志 DEBUG级别输出
#logging.level.com.xxx.xxxx.mapper=DEBUG
logging.file=logs/spring-boot-logging.log
logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n


#=========redis基础配置=========
spring.redis.database=0
spring.redis.host=127.0.0.1
spring.redis.port=6379
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000

#=========redis线程池设置=========
# 连接池中的最大空闲连接，默认值也是8。
spring.redis.pool.max-idle=200

#连接池中的最小空闲连接，默认值也是0。
spring.redis.pool.min-idle=200

# 如果赋值为-1，则表示不限制；pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
spring.redis.pool.max-active=2000

# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时
spring.redis.pool.max-wait=1000
